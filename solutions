##Problem1
class LFUCache {



    int min;

    int capacity;

    HashMap<Integer, Integer> keyToCount;

    HashMap<Integer, LinkedHashMap<Integer,Integer>> countToLRU;

    

    public LFUCache(int capacity) {

        this.capacity = capacity;

        this.min = 0;

        keyToCount = new HashMap<>();

        countToLRU = new HashMap<>();

    }

    

    private LinkedHashMap<Integer, Integer> getLHM() {

        return new LinkedHashMap<Integer, Integer>(capacity, 0.75f, true) {

            protected boolean removeEldestEntry(Map.Entry eldest) {

                return size() > capacity;

            };

        };

    }

    

    public int get(int key) {

        if (!keyToCount.containsKey(key)) {

            return -1;

        }

        

        int count = keyToCount.get(key);

        int val = countToLRU.get(count).remove(key);

        if (count == min && countToLRU.get(count).size() == 0) {

            min++;

        }

        keyToCount.put(key, count + 1);

        countToLRU.putIfAbsent(count + 1, getLHM());

        countToLRU.get(count+1).put(key, val);

        return val;

    }

    

    public void put(int key, int value) {

        if (capacity <= 0) {

            return;

        }

        if (keyToCount.containsKey(key)) {

            get(key);

            int freq = keyToCount.get(key);

            countToLRU.get(freq).put(key, value);

            return;

        }

        if (keyToCount.size() >= capacity) {

            int k = countToLRU.get(min).entrySet().iterator().next().getKey();

            countToLRU.get(min).remove(k);

            keyToCount.remove(k);

        }

        min = 1;

        keyToCount.put(key, 1);

        countToLRU.putIfAbsent(1, getLHM());

        countToLRU.get(1).put(key, value);

    }

}

##Problem2
class SnakeGame {

    LinkedList<int []> snake;
 
    int [] head;
 
    int i; // moving on the food arr;
 
    int w; int h; 
 
    int [][] foodList;
 
    boolean [][] visited;
 
    public SnakeGame(int width, int height, int[][] food) {
 
        this.visited = new boolean[height][width];
 
        this.w = width; this.h = height;
 
        this.head = new int[]{0,0};
 
        this.foodList = food;
 
        this.snake = new LinkedList<>();
 
        this.snake.addLast(new int[]{head[0], head[1]});
 
    }
 
    public int move(String direction) {
 
        if(direction.equals("U")){
 
            head[0]--;
 
        } else if (direction.equals("D")){
 
              head[0]++;
 
        } else if(direction.equals("R")){
 
            head[1]++;
 
        } else if(direction.equals("L")){
 
             head[1]--;
 
        }
 
        //hits borders 
 
        if(head[0] <  0 || head[0] == h || head[1] < 0 || head[1] == w) return -1;
 
        // hits itself
 
        // for(int j = 1; j < snake.size(); j++){
 
        //     int [] curr = snake.get(j);
 
        //     if(curr[0] == head[0] && curr[1] == head[1]){
 
        //         return -1;
 
        //     }
 
        // }
 
        if(visited[head[0]][head[1]]) return -1;
 
        //eats food
 
        if(i < foodList.length){
 
            int [] currFood = foodList[i];
 
           if(currFood[0] == head[0] && currFood[1] == head[1]){
 
               visited[head[0]][head[1]] = true;
 
               snake.addLast(new int[]{head[0], head[1]});
 
               i++;
 
               return snake.size() - 1;
 
           }
 
        }
 
        // normal move
 
        //remove the head of linkedList || tail of snake
 
        if(snake.size() > 1){
 
            int [] toRemove = snake.get(1);
 
            visited[toRemove[0]][toRemove[1]] = false;
 
        }
 
        snake.removeFirst(); // removing tail of snake
 
        snake.addLast(new int[]{head[0], head[1]});
 
        if(snake.size() > 1){
 
            visited[head[0]][head[1]] = true;
 
        }
 
        return snake.size() - 1;
 
    }
 
 }

